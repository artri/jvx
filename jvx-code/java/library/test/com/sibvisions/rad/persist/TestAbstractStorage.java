/*
 * Copyright 2009 SIB Visions GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *
 * History
 *
 * 06.01.2011 - [RH] - creation                
 */
package com.sibvisions.rad.persist;

import java.io.ByteArrayOutputStream;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import javax.rad.model.ColumnDefinition;
import javax.rad.model.ColumnView;
import javax.rad.model.ModelException;
import javax.rad.model.RowDefinition;
import javax.rad.model.condition.Equals;
import javax.rad.model.condition.ICondition;
import javax.rad.model.datatype.BigDecimalDataType;
import javax.rad.model.datatype.BooleanDataType;
import javax.rad.model.datatype.StringDataType;
import javax.rad.model.datatype.TimestampDataType;
import javax.rad.model.event.DataBookEvent;
import javax.rad.persist.DataSourceException;
import javax.rad.type.bean.Bean;
import javax.rad.type.bean.IBean;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sibvisions.rad.model.DataBookCSVExporter;
import com.sibvisions.rad.model.mem.MemDataBook;
import com.sibvisions.rad.persist.AbstractStorage.ChangeableBean;
import com.sibvisions.rad.persist.event.IStorageListener;
import com.sibvisions.rad.persist.event.StorageEvent;
import com.sibvisions.rad.persist.jdbc.DBAccess;
import com.sibvisions.rad.persist.jdbc.DBStorage;

/**
 * Tests all Functions of {@link AbstractStorage}.
 * 
 * @author Roland Hörmann
 * @see com.sibvisions.rad.persist.AbstractStorage
 */
public class TestAbstractStorage implements IStorageListener
{
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Class members
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/** The HSQLDBAccess Test instance. */
	protected DBAccess	dba;
	
	/** a flag for broken database connection. */
	private static boolean bConnectionError;
	
	/** count of called events. */
	private int iEventCount = 0;
	
	/** the global id counter. */
	private int iIdCounter = 0;
	
	/** Bean for the event check. */
	private Bean checkBean;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Initialization
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	/**
	 * Sets the static members.
	 */
	@BeforeClass
	public static void beforeClass()
	{
		bConnectionError = false;
	}
	
	/** 
	 * Connects to the Test Database and create a Test Table.
	 * 
	 * @throws Exception if the connect or the create table fails
	 */
	@Before
	public void open() throws Exception
	{
	    iIdCounter = 0;
	    
		checkConnectionError();
				
		// set connect properties
		dba	= DBAccess.getDBAccess("jdbc:hsqldb:hsql://localhost/testdb");
		dba.setUsername("sa");
		dba.setPassword("");
	
		try
		{
			// open and check
			dba.open();
			
			setConnectionError(false);
		}
		catch (Exception e)
		{
			setConnectionError(true);
			
			throw e;
		}
		Assert.assertTrue(dba.isOpen());

		// drop test tables
		try
		{
			dba.executeStatement("drop table DETAIL");
		}
		catch (SQLException se)
		{
			//nothing to be done
		}
		
		try
		{
			dba.executeStatement("drop table TEST");
		}
		catch (SQLException se)
		{
			//nothing to be done
		}

		
		// create test tables
		dba.executeStatement("create table TEST (id integer GENERATED BY DEFAULT AS IDENTITY primary key, name varchar(100))");
		dba.executeStatement("create table DETAIL (id integer GENERATED BY DEFAULT AS IDENTITY primary key, name varchar(100))");
	}

	/**
	 * Closes the db connection.
	 * 
	 * @throws Exception if the connection can not be closed
	 */
	@After
	public void close() throws Exception
	{
		if (!bConnectionError)
		{
			dba.close();
		}
	}	
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// User-defined methods
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	/**
	 * Checks if the db connection has errors and stops the test.
	 */
	protected void checkConnectionError()
	{
		if (bConnectionError)
		{
			Assert.fail("DB connection error!");
		}
	}
	
	/**
	 * Sets the state of the connection error.
	 * 
	 * @param pError <code>true</code> means that the connection is broken, <code>false</code> if the connection is 
	 *               ready to use
	 */
	protected void setConnectionError(boolean pError)
	{
		bConnectionError = pError;
	}	
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Test methods
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/**
	 * Tests insert, update, delete, fetch and refecth with a Bean.
	 * 
	 * @throws Exception if not all methods work correctly
	 */
	@Test
	public void testBeanSupport() throws Exception
	{
		DBStorage dbTest = new DBStorage();
		dbTest.setWritebackTable("TEST");
		dbTest.setDBAccess(dba);
		dbTest.open();
		
		Bean bean =  new Bean();
		bean.put("NAME", "Testname");
		
		// insert()
		IBean result = dbTest.insert(bean);	
		Assert.assertEquals(result.get("NAME"), bean.get("NAME"));
		
		// refetch
		result = dbTest.refetch(result);	
		Assert.assertEquals(result.get("NAME"), bean.get("NAME"));

		// fetch()
		result = dbTest.fetchBean(new Equals("NAME", bean.get("NAME")));
		Assert.assertEquals(result.get("NAME"), bean.get("NAME"));

		bean.put("NAME", "Testname 2");
		result = dbTest.insert(bean);	

		List<IBean> list = dbTest.fetchBean(null, null, 0, 2);
		Assert.assertEquals(2, list.size());
				
		// update()
		bean.put("NAME", "NEW Testname");
		result = dbTest.update(bean);
		Assert.assertEquals(result.get("NAME"), bean.get("NAME"));

		// delete()
		dbTest.delete(result);
		result = dbTest.fetchBean(new Equals("NAME", bean.get("NAME")));
		Assert.assertNull(result);
		
		// update(old, new)
		Bean oldBean = new Bean();
		bean.put("NAME", "Replace Test");
		
		oldBean = dbTest.insert(oldBean);
		
		Assert.assertNotNull(oldBean.get("ID"));
		
		Bean newBean = new Bean();
		newBean.put("ID", oldBean.get("ID"));
		newBean.put("NAME", "Replacer");
		
		Bean updatedBean = dbTest.update(oldBean, newBean);
		
		Assert.assertEquals(oldBean.get("ID"), updatedBean.get("ID"));
	}	
	
	/**
	 * Tests insert, update, delete, fetch, and refecth with a POJO.
	 * 
	 * @throws Exception if not all methods work correctly
	 */
	@Test
	public void testPOJOSupport() throws Exception
	{
		DBStorage dbTest = new DBStorage();
		dbTest.setWritebackTable("TEST");
		dbTest.setDBAccess(dba);
		dbTest.open();
		
		SimplePOJO testPojo = new SimplePOJO();
		testPojo.setName("Testname");
		
		// insert()
		SimplePOJO result = dbTest.insert(testPojo);
		
		Assert.assertEquals(testPojo.getName(), result.getName());
		
		// refetch
		result = dbTest.refetch(result);	
		Assert.assertEquals(testPojo.getName(), result.getName());

		// fetch()
		result = dbTest.fetch(SimplePOJO.class, new Equals("NAME", testPojo.getName()));
		Assert.assertEquals(testPojo.getName(), result.getName());

		testPojo.setName("Testname 2");
		result = dbTest.insert(testPojo);	

		List<SimplePOJO> list = dbTest.fetch(SimplePOJO.class, null, null, 0, 2);
		Assert.assertEquals(2, list.size());
				
		// update()
		testPojo.setName("NEW Testname");
		result = dbTest.update(testPojo);
		Assert.assertEquals(testPojo.getName(), result.getName());

		// delete()
		dbTest.delete(result);
		result = dbTest.fetch(SimplePOJO.class, new Equals("NAME", testPojo.getName()));
		Assert.assertNull(result);
		
		// update(old, new)
		SimplePOJO oldPojo = new SimplePOJO();
		oldPojo.setName("Replace Test");
		
		oldPojo = dbTest.insert(oldPojo);
		
		Assert.assertNotNull(oldPojo.getId());

		SimplePOJO newPojo = new SimplePOJO();
		newPojo.setId(oldPojo.getId());
		newPojo.setName("Replacer");
		
		SimplePOJO updatedBean = dbTest.update(oldPojo, newPojo);
		
		Assert.assertEquals(oldPojo.getId(), updatedBean.getId());
	}

    /**
     * Tests setting property names for columns.
     * 
     * @throws Exception if not all methods work correctly
     */
    @Test
    public void testSetPropertyNameForColumn961() throws Exception
    {
        DBStorage dbTest = new DBStorage();
        dbTest.setWritebackTable("TEST");
        dbTest.setDBAccess(dba);
        
        dbTest.setPropertyNameForColumn("NAME", "newName");
        
        dbTest.open();
        
        SimplePOJO testPojo = new SimplePOJO();
        testPojo.setNewName("Testname");
        
        // insert()
        SimplePOJO result = dbTest.insert(testPojo);
        
        Assert.assertNull(result.getName());
        Assert.assertNotNull(result.getNewName());
        Assert.assertEquals(testPojo.getNewName(), result.getNewName());

        // fetch()
        result = dbTest.fetch(SimplePOJO.class, new Equals("NAME", testPojo.getNewName()));
        Assert.assertEquals(testPojo.getNewName(), result.getNewName());
        
        dbTest.delete(result);
        result = dbTest.fetch(SimplePOJO.class, new Equals("NAME", testPojo.getNewName()));
        Assert.assertNull(result);      
    }
	
	/**
	 * Tests before/after insert, update, delete events and the calculate row event.
	 * 
	 * @throws Exception if not all methods work correctly
	 */
	@Test
	public void testEvents() throws Exception
	{
		DBStorage dbTest = new DBStorage();
		dbTest.setWritebackTable("TEST");
		dbTest.setDBAccess(dba);
		dbTest.eventBeforeInsert().addListener(this);
		dbTest.eventAfterInsert().addListener(this);
		dbTest.eventBeforeUpdate().addListener(this);
		dbTest.eventAfterUpdate().addListener(this);
		dbTest.eventBeforeDelete().addListener(this);
		dbTest.eventAfterDelete().addListener(this);
		dbTest.eventCalculateRow().addListener(this);
		dbTest.open();
		
		checkBean = new Bean();
		checkBean.put("NAME", "Testname");
		
		// insert()
		IBean result = dbTest.insert(checkBean);	

		Assert.assertEquals(result.get("NAME"), checkBean.get("NAME"));

		//changed first via before insert and then via calculate row
		Assert.assertEquals(BigDecimal.valueOf(1001), result.get("ID"));
		
		// refetch
		
		//set back to the database value and don't use the calculated value
		result.put("ID", new BigDecimal(99));
		
		result = dbTest.refetch(result);	
		Assert.assertEquals(result.get("NAME"), checkBean.get("NAME"));

		// fetch()
		result = dbTest.fetchBean(new Equals("NAME", checkBean.get("NAME")));
		Assert.assertEquals(result.get("NAME"), checkBean.get("NAME"));
				
		// update()
		checkBean.put("ID", BigDecimal.valueOf(99));	//SET via storeChanged - BEFORE INSERT
		checkBean.put("NAME", "NEW Testname");
		
		result = dbTest.update(checkBean);
		Assert.assertEquals(result.get("NAME"), checkBean.get("NAME"));

		// delete()
		
		//set back to the database value and don't use the calculated value
		result.put("ID", new BigDecimal(99));

		dbTest.delete(result);
		result = dbTest.fetchBean(new Equals("NAME", checkBean.get("NAME")));
		Assert.assertNull(result);	
		
		Assert.assertEquals(10, iEventCount);
	}
	
	/**
	 * Tests insert with before insert event.
	 * 
	 * @throws DataSourceException if the test failed
	 */
	@Test
	public void testBeforeInsert() throws DataSourceException
	{
		DBStorage dbTest = new DBStorage();
		dbTest.setWritebackTable("TEST");
		dbTest.setDBAccess(dba);
		dbTest.eventBeforeInsert().addListener(this);
		dbTest.open();
		
		checkBean = new Bean();
		checkBean.put("NAME", "Testname");

		dbTest.delete(checkBean);
		
		// insert()
		IBean result = dbTest.insert(checkBean);	

		dbTest.delete(checkBean);
		
		Assert.assertEquals(result.get("NAME"), checkBean.get("NAME"));
	}
	
    /**
     * Tests inserting with instead-of insert event.
     * 
     * @throws DataSourceException if the test failed
     */
    @Test
    public void testInsteadOfInsert() throws DataSourceException
    {
        DBStorage dbTest = new DBStorage();
        dbTest.setWritebackTable("TEST");
        dbTest.setDBAccess(dba);
        dbTest.eventInsteadOfInsert().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                IBean bnNew = pStorageEvent.getNew();
                
                //add a temporary column
                bnNew.put("OLD_ID", (BigDecimal)bnNew.get("ID"));
                bnNew.put("ID", BigDecimal.valueOf(iIdCounter++));
            }
        });
        dbTest.eventInsteadOfInsert().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                IBean bnNew = pStorageEvent.getNew();

                //read temporary column
                bnNew.put("NAME", bnNew.get("NAME") + " => " + bnNew.get("OLD_ID"));
                
                bnNew.put("ID", ((BigDecimal)bnNew.get("ID")).add(BigDecimal.valueOf(10)));
            }
        });
        dbTest.open();

        Object[] oaInput = new Object[] {BigDecimal.valueOf(-1), "First record"};
        
        Object[] oaResult = dbTest.insert(oaInput);

        //no temporary column!
        Assert.assertEquals(2, oaResult.length);

        //input not touched!
        Assert.assertEquals(BigDecimal.valueOf(-1), oaInput[0]);
        Assert.assertEquals("First record", oaInput[1]);
        
        Assert.assertEquals(BigDecimal.valueOf(10), oaResult[0]);
        Assert.assertEquals("First record => -1", oaResult[1]);
        
        //Same test with Bean
        
        IBean bnInput = new Bean();
        bnInput.put("ID", BigDecimal.valueOf(-1));
        bnInput.put("NAME", "First record");
        
        IBean bnResult = dbTest.insert(bnInput);
        
        Assert.assertEquals(BigDecimal.valueOf(-1), bnInput.get("ID"));
        Assert.assertEquals("First record", bnInput.get("NAME"));
        
        Assert.assertEquals(BigDecimal.valueOf(11), bnResult.get("ID"));
        Assert.assertEquals("First record => -1", bnResult.get("NAME"));
        
        // Same test with POJO
        
        SimplePOJO pjInput = new SimplePOJO();
        pjInput.setId(BigDecimal.valueOf(-1));
        pjInput.setName("First record");

        SimplePOJO pjResult = dbTest.insert(pjInput);
        
        Assert.assertEquals(BigDecimal.valueOf(-1), pjInput.getId());
        Assert.assertEquals("First record", pjInput.getName());
        
        Assert.assertEquals(BigDecimal.valueOf(12), pjResult.getId());
        Assert.assertEquals("First record => -1", pjResult.getName());
        
        //-------------------------------------------------------------
        //DISABLE REFETCH and repeat tests
        //-------------------------------------------------------------

        dbTest.setRefetch(false);
        
        oaResult = dbTest.insert(oaInput);
        
        Assert.assertEquals(BigDecimal.valueOf(13), oaInput[0]);
        Assert.assertEquals("First record => -1", oaInput[1]);
        
        Assert.assertEquals(BigDecimal.valueOf(13), oaResult[0]);
        Assert.assertEquals("First record => -1", oaResult[1]);
        
        //Same test with Bean
        
        bnResult = dbTest.insert(bnInput);
        
        Assert.assertEquals(BigDecimal.valueOf(14), bnInput.get("ID"));
        Assert.assertEquals("First record => -1", bnInput.get("NAME"));
        
        Assert.assertEquals(BigDecimal.valueOf(14), bnResult.get("ID"));
        Assert.assertEquals("First record => -1", bnResult.get("NAME"));
        
        // Same test with POJO
        
        pjResult = dbTest.insert(pjInput);
        
        Assert.assertEquals(BigDecimal.valueOf(15), pjInput.getId());
        Assert.assertEquals("First record => -1", pjInput.getName());
        
        Assert.assertEquals(BigDecimal.valueOf(15), pjResult.getId());
        Assert.assertEquals("First record => -1", pjResult.getName());        
    }	
	
    /**
     * Tests deleting with instead-of delete event.
     * 
     * @throws DataSourceException if the test failed
     */
    @Test
    public void testInsteadOfDelete() throws DataSourceException
    {
        DBStorage dbTest = new DBStorage();
        dbTest.setWritebackTable("TEST");
        dbTest.setDBAccess(dba);
        dbTest.open();

        //------------------------------------------------
        // Test records
        //------------------------------------------------
        
        Bean bean =  new Bean();
        bean.put("NAME", "Testname");
        
        IBean result = dbTest.insert(bean); 

        Assert.assertEquals(BigDecimal.valueOf(0), result.get("ID"));
        Assert.assertEquals(result.get("NAME"), bean.get("NAME"));

        bean.put("ID", result.get("ID"));

        Bean bean2 =  new Bean();
        bean2.put("NAME", "Testname2");

        result = dbTest.insert(bean2);
        
        Assert.assertEquals(BigDecimal.valueOf(1), result.get("ID"));
        Assert.assertEquals(result.get("NAME"), bean2.get("NAME"));
        
        bean2.put("ID", result.get("ID"));

        Bean bean3 =  new Bean();
        bean3.put("NAME", "Testname3");

        result = dbTest.insert(bean3);
        
        Assert.assertEquals(BigDecimal.valueOf(2), result.get("ID"));
        Assert.assertEquals(result.get("NAME"), bean3.get("NAME"));
        
        bean3.put("ID", result.get("ID"));
        
        //------------------------------------------------
        // Delete
        //------------------------------------------------
        
        dbTest.eventInsteadOfDelete().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                try
                {
                    dba.executeSql("delete from TEST where id = ?", pStorageEvent.getOldAsArray()[0]);
                }
                catch (SQLException sqle)
                {
                    throw new DataSourceException(sqle);
                }
            }
        });
        
        //Array
        dbTest.delete(new Object[] {BigDecimal.valueOf(0)});
        //Bean
        dbTest.delete(bean2);
        //POJO
        
        SimplePOJO pojo = new SimplePOJO();
        pojo.setId((BigDecimal)bean3.get("ID"));
        
        dbTest.delete(pojo);
        
        Assert.assertEquals(0, dbTest.fetchBean(null, null, 0, -1).size());
    }
    
    /**
     * Tests updating with instead-of update event.
     * 
     * @throws Exception if the test failed
     */
    @Test
    public void testInsteadOfUpdate() throws Exception
    {
        DBStorage dbTest = new DBStorage();
        dbTest.setWritebackTable("TEST");
        dbTest.setDBAccess(dba);
        dbTest.open();

        final DBStorage dbDetail = new DBStorage();
        dbDetail.setWritebackTable("DETAIL");
        dbDetail.setDBAccess(dba);
        dbDetail.open();

        //------------------------------------------------
        // Test records
        //------------------------------------------------
        
        Bean bean =  new Bean();
        bean.put("NAME", "Testname");
        
        Bean bean2 =  new Bean();
        bean2.put("NAME", "Testname2");

        Bean bean3 =  new Bean();
        bean3.put("NAME", "Testname3");

        IBean result;
        
        result = dbTest.insert(bean);
        bean.put("ID", result.get("ID"));
        result = dbDetail.insert(bean);
        Assert.assertEquals(bean.get("ID"), result.get("ID"));

        result = dbTest.insert(bean2);
        bean2.put("ID", result.get("ID"));
        result = dbDetail.insert(bean2);
        Assert.assertEquals(bean2.get("ID"), result.get("ID"));

        result = dbTest.insert(bean3);
        bean3.put("ID", result.get("ID"));
        result = dbDetail.insert(bean3);
        Assert.assertEquals(bean3.get("ID"), result.get("ID"));
        
        //------------------------------------------------
        // Update
        //------------------------------------------------

        dbTest.eventInsteadOfUpdate().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                try
                {
                    //simple forwarding
                    dbDetail.update(pStorageEvent.getOldAsArray(), pStorageEvent.getNewAsArray());
                }
                catch (Exception sqle)
                {
                    throw new DataSourceException(sqle);
                }
            }
        });
        
        StorageDataBook sdbTest = new StorageDataBook(dbTest);
        sdbTest.open();
        StorageDataBook sdbDetail = new StorageDataBook(dbDetail);
        sdbDetail.open();
        
        bean2.put("NAME", "Update: " + bean2.get("NAME"));
        dbTest.update(bean2);
        
        bean3.put("NAME", null);
        dbTest.update(bean3);
        
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataBookCSVExporter.writeCSV(sdbTest, baos);

        Assert.assertEquals("\"Name\"\n\"Testname\"\n\"Testname2\"\n\"Testname3\"\n", baos.toString());

        baos.reset();
        DataBookCSVExporter.writeCSV(sdbDetail, baos);
        
        Assert.assertEquals("\"Name\"\n\"Testname\"\n\"Update: Testname2\"\n\n", baos.toString());
    }
    
    /**
     * Tests updating with instead-of update event.
     * 
     * @throws Exception if the test failed
     */
    @Test
    public void testBeforeAfterInsert() throws Exception
    {
        DBStorage dbTest = new DBStorage();
        dbTest.setWritebackTable("TEST");
        dbTest.setDBAccess(dba);
        dbTest.open();
        
        dbTest.eventBeforeInsert().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                Assert.assertNull(pStorageEvent.getOld());
                pStorageEvent.getNew().put("NAME", "(Before)");
            }
        });

        dbTest.eventAfterInsert().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                Assert.assertNull(pStorageEvent.getOld());
                
                Assert.assertEquals("(Before)", pStorageEvent.getNew().get("NAME"));
                Assert.assertNotNull(pStorageEvent.getNew().get("ID"));
            }
        });
        
        IBean bean = new Bean();
        bean.put("NAME", "First");
        
        dbTest.insert(bean);
        
        List<IBean> liBeans = dbTest.fetchBean(null, null, 0, -1);
        
        Assert.assertEquals(1, liBeans.size());
        Assert.assertEquals("(Before)", liBeans.get(0).get("NAME"));
    }
    
    /**
     * Tests updating with instead-of update event.
     * 
     * @throws Exception if the test failed
     */
    @Test
    public void testInsteadOfInsert1463() throws Exception
    {
        final DBStorage dbTest = new DBStorage();
        dbTest.setWritebackTable("TEST");
        dbTest.setDBAccess(dba);
        dbTest.open();
        
        dbTest.eventBeforeInsert().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                Assert.assertEquals("Wrong value in NAME column!", "First", pStorageEvent.getNew().get("NAME"));
                
                pStorageEvent.getNew().put("NAME", pStorageEvent.getNew().get("NAME") + " (before)");
            }
        });

        dbTest.eventInsteadOfInsert().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                Assert.assertEquals("Wrong value in NAME column!", "First (before)", pStorageEvent.getNew().get("NAME"));
                Assert.assertEquals("Wrong value in NAME column!", "First (before)", pStorageEvent.getNewAsArray()[1]);

                dbTest.eventBeforeInsert().setDispatchEventsEnabled(false);
                dbTest.eventAfterInsert().setDispatchEventsEnabled(false);
                
                try
                {
                    pStorageEvent.getNew().putAll(dbTest.insert(pStorageEvent.getNew()));
                }
                finally
                {
                    dbTest.eventBeforeInsert().setDispatchEventsEnabled(true);
                    dbTest.eventAfterInsert().setDispatchEventsEnabled(true);
                }
            }
        });

        dbTest.eventAfterInsert().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
            {
                Assert.assertNotNull("ID can't be null", pStorageEvent.getNew().get("ID"));
                
                Assert.assertEquals("Name column doesn't match!", "First (before)", pStorageEvent.getNew().get("NAME"));
            }
        });
        
        IBean bean = new Bean();
        bean.put("NAME", "First");
        
        dbTest.insert(bean);
        
        List<IBean> liBeans = dbTest.fetchBean(null, null, 0, -1);
        
        Assert.assertEquals(1, liBeans.size());
        Assert.assertEquals("First (before)", liBeans.get(0).get("NAME"));
    }    
    
	/**
	 * Tests for the correct behavior of the insert method, depending whether
	 * refetch is enabled or not. Ticket #958.
	 * <p/>
	 * If refetch is enabled, a new object should be returned, and the old one
	 * should be unchanged.
	 * <p/>
	 * If refetch is disabled, the old object should be returned, updated with
	 * the PKs.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testRefetchInsertBehavior() throws DataSourceException
	{
		DBStorage dbTest = new DBStorage();
		dbTest.setWritebackTable("TEST");
		dbTest.setDBAccess(dba);
		dbTest.open();
		
		Bean bean = new Bean();
		bean.put("NAME", "Testname");
		
		SimplePOJO pojo = new SimplePOJO();
		pojo.setName("Testname");
		
		Object[] array = new Object[] { null, "Testname" };
		
		dbTest.setRefetch(true);
		
		Bean insertedBean = dbTest.insert(bean);
		Assert.assertNotSame(bean, insertedBean);
		Assert.assertNull(bean.get("ID"));
		Assert.assertNotNull(insertedBean.get("ID"));
		
		SimplePOJO insertedPojo = dbTest.insert(pojo);
		Assert.assertNotSame(pojo, insertedPojo);
		Assert.assertNull(pojo.getId());
		Assert.assertNotNull(insertedPojo.getId());
		
		Object[] insertedArray = dbTest.insert(array);
		Assert.assertNotSame(array, insertedArray);
		Assert.assertNull(array[0]);
		Assert.assertNotNull(insertedArray[0]);
		
		dbTest.setRefetch(false);
		
		bean.put("ID", null);
		pojo.setId(null);
		array[0] = null;
		
		insertedBean = dbTest.insert(bean);
		Assert.assertSame(bean, insertedBean);
		Assert.assertNotNull(bean.get("ID"));
		
		insertedPojo = dbTest.insert(pojo);
		Assert.assertSame(pojo, insertedPojo);
		Assert.assertNotNull(pojo.getId());
		
		insertedArray = dbTest.insert(array);
		Assert.assertSame(array, insertedArray);
		Assert.assertNotNull(array[0]);
		
		dbTest.close();
	}
	
	/**
	 * Checks if the Events are thrown and have the correct parameters.
	 * 
	 * @param pStorageEvent the storage event
	 * @throws DataSourceException if storage event handling failed
	 */
	public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
	{
		iEventCount++;
		if (pStorageEvent.getType() == StorageEvent.ChangedType.BEFORE_INSERT)
		{
			Assert.assertNull(pStorageEvent.getOld());
			Assert.assertEquals(pStorageEvent.getNew().get("NAME"), checkBean.get("NAME"));

			SimplePOJO spojo = pStorageEvent.getNew(SimplePOJO.class);
			
			spojo.setId(BigDecimal.valueOf(99));
			
			Assert.assertEquals(pStorageEvent.getNew().get("ID"), new BigDecimal(99));
		}
		else if (pStorageEvent.getType() == StorageEvent.ChangedType.AFTER_INSERT)
		{
			Assert.assertNull(pStorageEvent.getOld());
			Assert.assertEquals(pStorageEvent.getNew().get("NAME"), checkBean.get("NAME"));
			Assert.assertNotNull(pStorageEvent.getNew().get("ID"));
		}
		else if (pStorageEvent.getType() == StorageEvent.ChangedType.BEFORE_UPDATE)
		{
			Assert.assertEquals(pStorageEvent.getNew().get("NAME"), checkBean.get("NAME"));			
		}
		else if (pStorageEvent.getType() == StorageEvent.ChangedType.AFTER_UPDATE)
		{
			Assert.assertEquals(pStorageEvent.getNew().get("NAME"), checkBean.get("NAME"));			
		}
		else if (pStorageEvent.getType() == StorageEvent.ChangedType.BEFORE_DELETE)
		{
			Assert.assertEquals(pStorageEvent.getOld().get("NAME"), checkBean.get("NAME"));						
			Assert.assertNull(pStorageEvent.getNew());
		}
		else if (pStorageEvent.getType() == StorageEvent.ChangedType.AFTER_DELETE)
		{
			Assert.assertEquals(pStorageEvent.getOld().get("NAME"), checkBean.get("NAME"));						
			Assert.assertNull(pStorageEvent.getNew());			
		}
		else if (pStorageEvent.getType() == StorageEvent.ChangedType.CALCULATE_ROW)
		{
			Assert.assertEquals(pStorageEvent.getNew().get("NAME"), checkBean.get("NAME"));	
			
			SimplePOJO spojo = pStorageEvent.getNew(SimplePOJO.class);
			
			spojo.setId(new BigDecimal(1001));
		}
	}
	
	/**
	 * Tests for ticket #1180, a possible conversion failure when trying
	 * to update POJOs in the AbstractStorage.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void test1180ConversionFailureOnPojoUpdate() throws DataSourceException
	{
		ConversionFailedTestMemStorage storage = new ConversionFailedTestMemStorage();
		storage.open();
		
		storage.insert(new ConversionFailedTestObject(BigDecimal.valueOf(1), "Name", Boolean.FALSE, new Date()));
		storage.update(new ConversionFailedTestObject(BigDecimal.valueOf(1), "New Name", Boolean.TRUE, new Date()));
		
		storage.close();
	}
	
	/**
	 * Tests for ticket #1190, an ArrayOutOfBoundsException when invoking
	 * {@link AbstractStorage#getEstimatedRowCount(ICondition)}.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void test1190GetEstimatedRowCountFails() throws DataSourceException
	{
		DBStorage dbTest = new DBStorage();
		dbTest.setWritebackTable("TEST");
		dbTest.setDBAccess(dba);
		dbTest.open();
		
		dbTest.fetch(null, null, -1, 0);
		
		dbTest.getEstimatedRowCount(null);
		dbTest.getEstimatedRowCount(new Equals());
		dbTest.getEstimatedRowCount(new Equals("ID", BigDecimal.valueOf(5)));
		
		dbTest.close();
	}

    /**
     * Tests for ticket #1190, an ArrayOutOfBoundsException when invoking
     * {@link AbstractStorage#getEstimatedRowCount(ICondition)}.
     * 
     * @throws DataSourceException if the test fails.
     */
    @Test
    public void testChangableBean() throws DataSourceException
    {
        DBStorage dbTest = new DBStorage();
        dbTest.setWritebackTable("TEST");
        dbTest.setDBAccess(dba);
        dbTest.open();

        final IBean[] oldBean = new IBean[1];
        dbTest.eventAfterUpdate().addListener(new IStorageListener()
        {
            public void storageChanged(StorageEvent pEvent) throws Throwable
            {
                oldBean[0] = pEvent.getOld();
            }
        });
        
        Bean insertBean = new Bean();
        insertBean.put("NAME", "Testname");
        dbTest.insert(insertBean);
        
        List<IBean> res = dbTest.fetchBean(null, null, -1, 0);
        
        ChangeableBean bean = (ChangeableBean)res.get(0);
        
        bean.put("NAME", "Testname2");
        
        dbTest.update(bean);
        
        dbTest.close();
        
        Assert.assertEquals("Testname", oldBean[0].get("NAME"));
    }

	//****************************************************************
	// Subclass definition
	//****************************************************************

	/**
	 * A POJO.
	 * 
	 * @author Martin Handsteiner
	 */
	public static class SimplePOJO
	{
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Class members
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		/** the id. */
		private BigDecimal id;
		
		/** the name. */
		private String name;
		
		/** The new name. */
		private String newName;
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// User-defined methods
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		/**
		 * Gets the id.
		 * 
		 * @return the id
		 */
    	public BigDecimal getId()
    	{
    		return id;
    	}
    	
    	/**
    	 * Sets the id.
    	 * 
    	 * @param pId the id
    	 */
    	public void setId(BigDecimal pId)
    	{
    		id = pId;
    	}
    	
		/**
		 * Gets the name.
		 * 
		 * @return the name
		 */
    	public String getName()
    	{
    		return name;
    	}
    	
    	/**
    	 * Sets the name.
    	 * 
    	 * @param pName the name
    	 */
    	public void setName(String pName)
    	{
    		name = pName;
    	}
    	
    	/**
    	 * Gets the new name.
    	 * 
    	 * @return the new name
    	 */
    	public String getNewName()
    	{
    	    return newName;
    	}
    	
    	/**
    	 * Sets the new name.
    	 * 
    	 * @param pName the new name
    	 */
    	public void setNewName(String pName)
    	{
    	    newName = pName;
    	}

	}	// SimplePOJO
	
	/**
	 * A simple POJO with the main purpose to contain multiple, differently
	 * typed fields, mainly used for testing for failed conversions.
	 * 
	 * @author Robert Zenz
	 */
    @SuppressWarnings("unused")
	private static final class ConversionFailedTestObject
	{
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Class members
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/** The id. */
		private BigDecimal id;
		
		/** The name. */
		private String name;
		
		/** The value. */
		private Boolean value;
		
		/** The creation. */
		private Date creation;
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Initialization
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/**
		 * Creates a new instance of {@link ConversionFailedTestObject}.
		 */
        public ConversionFailedTestObject()
		{
		}
		
		/**
		 * Creates a new instance of {@link ConversionFailedTestObject}.
		 * 
		 * @param pId the id.
		 * @param pName the name.
		 * @param pValue the value.
		 * @param pCreation the creation.
		 */
		public ConversionFailedTestObject(BigDecimal pId, String pName, Boolean pValue, Date pCreation)
		{
			id = pId;
			name = pName;
			value = pValue;
			creation = pCreation;
		}
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Method definitions
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/**
		 * Gets the id.
		 * 
		 * @return the id
		 */
        public BigDecimal getId()
		{
			return id;
		}
		
		/**
		 * Gets the name.
		 * 
		 * @return the name
		 */
		public String getName()
		{
			return name;
		}
		
		/**
		 * Gets the value.
		 * 
		 * @return the value
		 */
		public Boolean getValue()
		{
			return value;
		}
		
		/**
		 * Gets the creation.
		 * 
		 * @return the creation
		 */
		public Date getCreation()
		{
			return creation;
		}
		
		/**
		 * Sets the id.
		 * 
		 * @param pId the new id.
		 */
		public void setId(BigDecimal pId)
		{
			id = pId;
		}
		
		/**
		 * Sets the name.
		 * 
		 * @param pName the new name.
		 */
		public void setName(String pName)
		{
			name = pName;
		}
		
		/**
		 * Sets the value.
		 * 
		 * @param pValue the new value.
		 */
		public void setValue(Boolean pValue)
		{
			value = pValue;
		}
		
		/**
		 * Sets the creation.
		 * 
		 * @param pCreation the new creation.
		 */
		public void setCreation(Date pCreation)
		{
			creation = pCreation;
		}
		
	}	// ConversionFailedTestObject

	/**
	 * An {@link AbstractMemStorage} implementation that is designed to hold
	 * {@link ConversionFailedTestObject}s.
	 * 
	 * @author Robert Zenz
	 */
	private static final class ConversionFailedTestMemStorage extends AbstractMemStorage
	{
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Initialization
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/**
		 * Creates a new instance of {@link ConversionFailedTestMemStorage}.
		 */
		public ConversionFailedTestMemStorage()
		{
			super();
		}
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Overwritten methods
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/**
		 * {@inheritDoc}
		 */
		@Override
		public RowDefinition getRowDefinition() throws ModelException
		{
			RowDefinition rowDef = new RowDefinition();
			
			rowDef.addColumnDefinition(new ColumnDefinition("ID", new BigDecimalDataType()));
			rowDef.addColumnDefinition(new ColumnDefinition("NAME", new StringDataType()));
			rowDef.addColumnDefinition(new ColumnDefinition("VALUE", new BooleanDataType()));
			rowDef.addColumnDefinition(new ColumnDefinition("CREATION", new TimestampDataType()));
			
			rowDef.setPrimaryKeyColumnNames(new String[] { "ID" });
			
			rowDef.setColumnView(null, new ColumnView("ID", "NAME", "VALUE", "CREATION"));
			
			return rowDef;
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void loadData(MemDataBook pBook, ICondition pFilter) throws ModelException
		{
			// Does nothing, not needed.
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void insert(DataBookEvent pEvent) throws ModelException
		{
			// Does nothing, not needed.
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void update(DataBookEvent pEvent) throws ModelException
		{
			// Does nothing, not needed.
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void delete(DataBookEvent pEvent) throws ModelException
		{
			// Does nothing, not needed.
		}
		
	}	// ConversionFailedTestMemStorage
	
} 	// TestAbstractStorage
