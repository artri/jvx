/*
 * Copyright 2014 SIB Visions GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *
 * History
 *
 * 21.11.2014 - [RZ] - creation
 */
package com.sibvisions.rad.persist;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.rad.model.condition.Equals;
import javax.rad.persist.DataSourceException;
import javax.rad.type.bean.IBean;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.sibvisions.rad.persist.event.IStorageListener;
import com.sibvisions.rad.persist.event.StorageEvent;
import com.sibvisions.rad.persist.jdbc.DBAccess;
import com.sibvisions.rad.persist.jdbc.DBStorage;

/**
 * Test the performance of the storage.
 * 
 * @author Robert Zenz
 */
public class TestStoragePerformance
{
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Class members
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	/** The count of iterations for the test. */
	private static final int ITERATIONS = 100;
	
	/** The nano second start. */
	private long start;
	
	/** The dbaccess. */
	private DBAccess dba;
	
	/** The storage under test. */
	private DBStorage storage;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Initialization
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	/**
	 * Inits the access and storage.
	 * 
	 * @throws Exception if that fails.
	 */
	@Before
	public void setUp() throws Exception
	{
		// set connect properties
		dba	= DBAccess.getDBAccess("jdbc:hsqldb:hsql://localhost/testdb");
		dba.setUsername("sa");
		dba.setPassword("");
	
		dba.open();
		
		Assert.assertTrue(dba.isOpen());
		
		dba.executeSql("drop table if exists STORAGE_PERF_TEST");
		dba.executeSql("create table STORAGE_PERF_TEST (ID integer GENERATED BY DEFAULT AS IDENTITY primary key, NAME varchar(100), NOTE varchar(100), CREATION timestamp)");
		
		storage = new DBStorage();
		storage.setWritebackTable("STORAGE_PERF_TEST");
		storage.setDBAccess(dba);
		storage.open();
		
		DummyListener listener = new DummyListener();
		
		storage.eventAfterDelete().addListener(listener);
		storage.eventAfterInsert().addListener(listener);
		storage.eventAfterUpdate().addListener(listener);
		storage.eventBeforeDelete().addListener(listener);
		storage.eventBeforeInsert().addListener(listener);
		storage.eventBeforeUpdate().addListener(listener);
		storage.eventCalculateRow().addListener(listener);
	}
	
	/**
	 * Closes the storage and access.
	 * 
	 * @throws Exception if that failes.
	 */
	@After
	public void tearDown() throws Exception
	{
		storage.close();
		
		dba.executeSql("drop table if exists STORAGE_PERF_TEST");
		dba.close();
		
		System.out.println();
	}
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Test methods
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	/**
	 * Tests the deletion of beans.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testDeleteBean() throws DataSourceException
	{
		// Insert data that we can update.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			IBean bean = storage.createEmptyBean();
			bean.put("ID", BigDecimal.valueOf(counter + 1));
			bean.put("NAME", "Test");
			bean.put("NOTE", "Note");
			bean.put("CREATION", new Timestamp(System.currentTimeMillis()));
			storage.insert(bean);
		}
		
		assertTestDataSanity();
		
		start("Delete Bean");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			IBean bean = storage.createEmptyBean();
			bean.put("ID", BigDecimal.valueOf(counter + 1));
			bean.put("NAME", "Updated");
			bean.put("NOTE", "UpdatedNot");
			bean.put("CREATION", new Timestamp(System.currentTimeMillis()));
			storage.delete(bean);
		}
		
		end();
		
		Assert.assertEquals(0, storage.getEstimatedRowCount(null));
	}

	/**
	 * Tests the deletion of arrays.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testDeleteObjectArray() throws DataSourceException
	{
		// Insert data that we can update.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new Object[] { BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis()) });
		}
		
		assertTestDataSanity();
		
		start("Delete Object[]");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.delete(new Object[] { BigDecimal.valueOf(counter + 1), "Updated", "Updated Note", new Timestamp(System.currentTimeMillis()) });
		}
		
		end();
		
		Assert.assertEquals(0, storage.getEstimatedRowCount(null));
	}

	/**
	 * Tests the deletion of POJOs.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testDeleteT() throws DataSourceException
	{
		// Insert data that we can update.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new SimplePOJO(BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis())));
		}
		
		assertTestDataSanity();
		
		start("Delete T");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.delete(new SimplePOJO(BigDecimal.valueOf(counter + 1), "Updated", "Updated Note", new Timestamp(System.currentTimeMillis())));
		}
		
		end();
		
		Assert.assertEquals(0, storage.getEstimatedRowCount(null));
	}

	/**
	 * Tests fetching of beans.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testFetchBean() throws DataSourceException
	{
		// Insert data that we can fetch.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			IBean bean = storage.createEmptyBean();
			bean.put("ID", BigDecimal.valueOf(counter + 1));
			bean.put("NAME", "Test");
			bean.put("NOTE", "Note");
			bean.put("CREATION", new Timestamp(System.currentTimeMillis()));
			storage.insert(bean);
		}
		
		assertTestDataSanity();
		
		start("Fetch Bean");
		
		List<IBean> rows = storage.fetchBean(null, null, -1, 0);
		
		end();

		Assert.assertNotNull(rows);
		Assert.assertFalse(rows.isEmpty());
		
		IBean row = rows.get(ITERATIONS / 2);
		
		Assert.assertNotNull(row);
		Assert.assertEquals(BigDecimal.valueOf(ITERATIONS / 2 + 1), row.get("ID"));
		Assert.assertEquals("Test", row.get("NAME"));
		Assert.assertEquals("Note", row.get("NOTE"));
		Assert.assertNotNull(row.get("CREATION"));
	}

	/**
	 * Tests fetching of arrays.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testFetchObjectArray() throws DataSourceException
	{
		// Insert data that we can fetch.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new Object[] { BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis()) });
		}
		
		assertTestDataSanity();
		
		start("Fetch Object[]");
		
		List<Object[]> rows = storage.fetch(null, null, -1, 0);
		
		end();
		
		Assert.assertNotNull(rows);
		Assert.assertFalse(rows.isEmpty());
		
		Object[] row = rows.get(ITERATIONS / 2);

		Assert.assertEquals(BigDecimal.valueOf(ITERATIONS / 2 + 1), row[0]);
		Assert.assertEquals("Test", row[1]);
		Assert.assertEquals("Note", row[2]);
		Assert.assertNotNull(row[3]);
	}

	/**
	 * Tests fetching of POJOs.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testFetchT() throws DataSourceException
	{
		// Insert data that we can fetch.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new SimplePOJO(BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis())));
		}
		
		assertTestDataSanity();
		
		start("Fetch T");
		
		List<SimplePOJO> rows = storage.fetch(SimplePOJO.class, null, null, -1, 0);
		
		end();
		
		Assert.assertNotNull(rows);
		Assert.assertFalse(rows.isEmpty());
		
		SimplePOJO row = rows.get(ITERATIONS / 2);

		Assert.assertEquals(BigDecimal.valueOf(ITERATIONS / 2 + 1), row.getId());
		Assert.assertEquals("Test", row.getName());
		Assert.assertEquals("Note", row.getNote());
		Assert.assertNotNull(row.getCreation());
	}
	
	/**
	 * Tests inserting of beans.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testInsertBean() throws DataSourceException
	{
		start("Insert Bean");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			IBean bean = storage.createEmptyBean();
			bean.put("ID", BigDecimal.valueOf(counter + 1));
			bean.put("NAME", "Test");
			bean.put("NOTE", "Note");
			bean.put("CREATION", new Timestamp(System.currentTimeMillis()));
			storage.insert(bean);
		}
		
		end();
		
		assertTestDataSanity();
	}

	/**
	 * Tests inserting of arrays.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testInsertObjectArray() throws DataSourceException
	{
		start("Insert Object[]");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new Object[] { BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis()) });
		}
		
		end();
		
		assertTestDataSanity();
	}

	/**
	 * Tests inserting of POJOs.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testInsertT() throws DataSourceException
	{
		start("Insert T");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new SimplePOJO(BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis())));
		}
		
		end();
		
		assertTestDataSanity();
	}

	/**
	 * Tests updating of beans.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testUpdateBean() throws DataSourceException
	{
		// Insert data that we can update.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			IBean bean = storage.createEmptyBean();
			bean.put("ID", BigDecimal.valueOf(counter + 1));
			bean.put("NAME", "Test");
			bean.put("NOTE", "Note");
			bean.put("CREATION", new Timestamp(System.currentTimeMillis()));
			storage.insert(bean);
		}
		
		assertTestDataSanity();
		
		start("Update Bean");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			IBean bean = storage.createEmptyBean();
			bean.put("ID", BigDecimal.valueOf(counter + 1));
			bean.put("NAME", "Updated");
			bean.put("NOTE", "UpdatedNot");
			bean.put("CREATION", new Timestamp(System.currentTimeMillis()));
			storage.update(bean);
		}
		
		end();
	}

	/**
	 * Tests updating of arrays.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testUpdateObjectArray() throws DataSourceException
	{
		// Insert data that we can update.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new Object[] { BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis()) });
		}
		
		assertTestDataSanity();
		
		start("Update Object[]");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			Object[] old = new Object[] { BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis()) };
			Object[] array = new Object[] { BigDecimal.valueOf(counter + 1), "Updated", "Updated Note", new Timestamp(System.currentTimeMillis()) };
			storage.update(old, array);
		}
		
		end();
	}

	/**
	 * Tests updating of POJOs.
	 * 
	 * @throws DataSourceException if the test fails.
	 */
	@Test
	public void testUpdateT() throws DataSourceException
	{
		// Insert data that we can update.
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.insert(new SimplePOJO(BigDecimal.valueOf(counter + 1), "Test", "Note", new Timestamp(System.currentTimeMillis())));
		}
		
		assertTestDataSanity();
		
		start("Update T");
		
		for (int counter = 0; counter < ITERATIONS; counter++)
		{
			storage.update(new SimplePOJO(BigDecimal.valueOf(counter + 1), "Updated", "Updated Note", new Timestamp(System.currentTimeMillis())));
		}
		
		end();
	}
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// User-defined methods
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	/**
	 * Asserts that the inserted data is sane.
	 * 
	 * @throws DataSourceException if something fails.
	 */
	private void assertTestDataSanity() throws DataSourceException
	{
		IBean row = storage.fetchBean(new Equals("ID", BigDecimal.valueOf(ITERATIONS / 2)));
		
		Assert.assertNotNull(row);
		Assert.assertEquals(BigDecimal.valueOf(ITERATIONS / 2), row.get("ID"));
		Assert.assertEquals("Test", row.get("NAME"));
		Assert.assertEquals("Note", row.get("NOTE"));
		Assert.assertNotNull(row.get("CREATION"));
	}
	
	/**
	 * Prints the end statement.
	 */
	private void end()
	{
		long end = System.nanoTime() - start;
		
		System.out.print(end / 1000 / 1000);
		System.out.print(" ms; ");
		System.out.print((double) end / ITERATIONS / 1000 / 1000);
		System.out.print(" ms");
	}
	
	/**
	 * Prints the start statement.
	 * 
	 * @param pTestName the name of the test.
	 */
	private void start(String pTestName)
	{
		System.out.print(pTestName);
		
		StringBuilder dots = new StringBuilder();
		dots.append(' ');
		for (int counter = 0; counter < (20 - pTestName.length()); counter++)
		{
			dots.append('.');
		}
		dots.append(' ');
		
		System.out.print(dots);
		
		start = System.nanoTime();
	}
	
	//****************************************************************
	// Subclass definition
	//****************************************************************
	
	/**
	 * A simple POJO used for testing.
	 * 
	 * @author Robert Zenz
	 */
	public static final class SimplePOJO
	{
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Class members
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/** The id. */
		private BigDecimal id;
		
		/** The name. */
		private String name;
		
		/** The note. */
		private String note;
		
		/** The creation. */
		private Date creation;
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// Initialization
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/**
		 * Creates a new instance of {@link SimplePOJO}.
		 */
		public SimplePOJO()
		{
		}
		
		/**
		 * Creates a new instance of {@link SimplePOJO}.
		 * 
		 * @param pId the id.
		 * @param pName the name.
		 * @param pNote the note.
		 * @param pCreation the creation.
		 */
		public SimplePOJO(BigDecimal pId, String pName, String pNote, Date pCreation)
		{
			id = pId;
			name = pName;
			note = pNote;
			creation = pCreation;
		}
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// User-defined methods
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/**
		 * Gets the id.
		 * 
		 * @return the id
		 */
		public BigDecimal getId()
		{
			return id;
		}
		
		/**
		 * Gets the name.
		 * 
		 * @return the name
		 */
		public String getName()
		{
			return name;
		}
		
		/**
		 * Gets the note.
		 * 
		 * @return the note
		 */
		public String getNote()
		{
			return note;
		}
		
		/**
		 * Gets the creation.
		 * 
		 * @return the creation
		 */
		public Date getCreation()
		{
			return creation;
		}
		
		/**
		 * Sets the id.
		 * 
		 * @param pId the new id.
		 */
		public void setId(BigDecimal pId)
		{
			id = pId;
		}
		
		/**
		 * Sets the name.
		 * 
		 * @param pName the new name.
		 */
		public void setName(String pName)
		{
			name = pName;
		}
		
		/**
		 * Sets the note.
		 * 
		 * @param pNote the new note.
		 */
		public void setNote(String pNote)
		{
			note = pNote;
		}
		
		/**
		 * Sets the creation.
		 * 
		 * @param pCreation the new creation.
		 */
		public void setCreation(Date pCreation)
		{
			creation = pCreation;
		}
		
	}	// SimplePOJO
	
	/**
	 * An {@link IStorageListener} that does nothing.
	 * 
	 * @author Robert Zenz
	 */
	private static final class DummyListener implements IStorageListener
	{
		
		/**
		 * {@inheritDoc}
		 */
		public void storageChanged(StorageEvent pStorageEvent) throws DataSourceException
		{
			// Does nothing.
			
			// Uncomment the following lines if you want to test the "old"
			// implementation, r6044 downward.
			// Uncommenting this code will force the old implementation of the
			// event handling to create an extra bean.
			//
			// if (pStorageEvent.getNew() != null)
			// {
			// 	pStorageEvent.setNew(pStorageEvent.getNew());
			// }
		}
		
	}	// DummyListener
	
}	// TestStoragePerformance
