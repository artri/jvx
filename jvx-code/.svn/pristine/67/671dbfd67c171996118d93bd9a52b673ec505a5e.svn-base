/*
 * Copyright 2015 SIB Visions GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *
 * History
 *
 * 20.02.2015 - [RZ] - creation
 */
package com.sibvisions.rad.persist.jdbc;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;

import javax.rad.model.condition.Equals;
import javax.rad.model.condition.GreaterEquals;
import javax.rad.remote.MasterConnection;
import javax.rad.type.bean.Bean;
import javax.rad.type.bean.IBean;

import org.junit.Assert;
import org.junit.Test;

import com.sibvisions.rad.model.remote.RemoteDataBook;
import com.sibvisions.rad.model.remote.RemoteDataSource;
import com.sibvisions.rad.persist.StorageDataBook;
import com.sibvisions.rad.remote.http.HttpConnection;
import com.sibvisions.util.type.CommonUtil;


/**
 * Tests different usages of {@link DBAccess}.
 * 
 * @author René Jahn
 */
public class TestDBAccessUsage
{
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // User-defined methods
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Creates a new {@link DBAccess} instance and creates an empty test table.
     * 
     * @return the {@link DBAccess} instance
     * @throws Exception if creating {@link DBAccess} or creating empty table failed
     */
    private DBAccess createDBAccess() throws Exception
    {
        DBAccess dba = DBAccess.getDBAccess("jdbc:hsqldb:hsql://localhost/testdb");
        dba.setUsername("sa");
        dba.setPassword("");
        dba.open();
        
        try
        {
            dba.executeStatement("drop table t_calculate");
        }
        catch (Exception e)
        {
            //not available -> ok
        }
        
        dba.executeStatement("CREATE TABLE t_calculate (id integer GENERATED BY DEFAULT AS IDENTITY(start with 1) primary key," +
                                                       "costs decimal(10) default 0," +
                                                       "factor decimal(2) default 10," +
                                                       "status char(1) default '?'," +
                                                       "description varchar(100))");
        
        return dba;
    }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Test methods
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    /**
     * Tests usage of plain JDBC.
     * 
     * @throws Exception if test fails
     */
    @Test
    public void testPlainJDBC() throws Exception
    {
        //clear
        DBAccess dba = createDBAccess();
        dba.close();
        
        //OPEN DB connection        
        Class.forName("org.hsqldb.jdbcDriver");
        
        Connection connection = DriverManager.getConnection(
                                   "jdbc:hsqldb:hsql://localhost/testdb", "sa", "");
        
        try
        {
            //pre-create statements
            PreparedStatement psInsert = connection.prepareStatement("insert into t_calculate (costs) values (?)");
            PreparedStatement psFetchById  = connection.prepareStatement("select * from t_calculate where id = ?");
        
            try
            {
                //INSERT first record
                psInsert.setObject(1, BigDecimal.valueOf(35));
                psInsert.execute();
                
                //check generated ID
                CallableStatement csId = connection.prepareCall("CALL IDENTITY()");
                ResultSet resKey = csId.executeQuery();
                
                if (resKey.next())
                {
                    Long id = (Long)resKey.getObject(1);
                    
                    psFetchById.setObject(1, id);
                    
                    ResultSet res = psFetchById.executeQuery();
                    
                    try
                    {
                        if (res.next())
                        {
                            Assert.assertEquals(Long.valueOf(1), id);
                            Assert.assertEquals(BigDecimal.valueOf(10), res.getBigDecimal("FACTOR"));
                            Assert.assertEquals("?", res.getString("STATUS"));
                        }
                        else
                        {
                            Assert.fail("Couldn't fetch record!");
                        }
                    }
                    finally
                    {
                        res.close();
                    }
                }
                else
                {
                    Assert.fail("Couldn't fetch identity!");
                }
                
                //INSERT second record
                psInsert.setObject(1, BigDecimal.valueOf(40));
                psInsert.execute();
                
                //INSERT third record
                psInsert.setObject(1, BigDecimal.valueOf(45));
                psInsert.execute();
          
                //Check record count
                Statement stmt = connection.createStatement();
                
                ResultSet res = stmt.executeQuery("select count(*) from t_calculate");
                
                try
                {
                    if (res.next())
                    {
                        Assert.assertEquals(3, res.getInt(1));
                    }
                    else
                    {
                        Assert.fail("Couldn't fetch record count!");
                    }
                }
                finally
                {
                    res.close();
                }
                
                //FILTER by ID
                psFetchById.setObject(1, Long.valueOf(2));
                
                try
                {
                    res = psFetchById.executeQuery();
        
                    if (res.next())
                    {
                        Assert.assertEquals(40, res.getInt("COSTS"));
                    }
                    else
                    {
                        Assert.fail("Couldn't fetch records with id = 1!");
                    }
                }
                finally
                {
                    res.close();
                }
                
                //FILTER by value (COSTS)
                PreparedStatement psFetchByCosts  = connection.prepareStatement("select count(*) from t_calculate where costs >= ?");
                psFetchByCosts.setObject(1, BigDecimal.valueOf(40));
                
                try
                {
                    res = psFetchByCosts.executeQuery();
                    
                    try
                    {
                        if (res.next())
                        {
                            Assert.assertEquals(2, res.getInt(1));
                        }
                        else
                        {
                            Assert.fail("Couldn't fetch records with costs >= 40!");
                        }
                    }
                    finally
                    {
                        res.close();
                    }
                }
                finally
                {
                    psFetchByCosts.close();
                }
            }
            finally
            {
                psInsert.close();
                psFetchById.close();
            }
        }
        finally
        {
            connection.close();
        }
    }
    
    /**
     * Tests usage of plain storage.
     * 
     * @throws Exception if test fails
     */
    @Test
    public void testPlainStorage() throws Exception
    {
        DBAccess dba = createDBAccess();
        
        try
        {
            DBStorage dbs = new DBStorage();
            dbs.setDBAccess(dba);
            dbs.setWritebackTable("t_calculate");
            dbs.open();
            
            //inserting records
            Bean bean35 = new Bean();
            bean35.put("COSTS", BigDecimal.valueOf(35));
            
            bean35 = dbs.insert(bean35);
    
            Bean bean40 = new Bean();
            bean40.put("COSTS", BigDecimal.valueOf(40));
            
            bean40 = dbs.insert(bean40);
    
            Bean bean45 = new Bean();
            bean45.put("COSTS", BigDecimal.valueOf(45));
    
            bean45 = dbs.insert(bean45);
            
            Assert.assertEquals(BigDecimal.valueOf(1), bean35.get("ID"));
            Assert.assertEquals(BigDecimal.valueOf(10), bean35.get("FACTOR"));
            Assert.assertEquals("?", bean35.get("STATUS"));
            
            //filtering
            List<IBean> liBeans = dbs.fetchBean(null, null, 0, -1);
            
            Assert.assertEquals(3, liBeans.size());
            
            IBean bean = dbs.fetchBean(new Equals("ID", BigDecimal.valueOf(2)));
            
            Assert.assertEquals(BigDecimal.valueOf(40), bean.get("COSTS"));
            
            liBeans = dbs.fetchBean(new GreaterEquals("COSTS", BigDecimal.valueOf(40)), null, 0, -1);
            
            Assert.assertEquals(2, liBeans.size());
        }
        finally
        {
            CommonUtil.close(dba);
        }
    }
    
    /**
     * Same test as {@link #testPlainStorage()} but with databook model class.
     * 
     * @throws Exception if test fails
     */
    @Test
    public void testEmbedded() throws Exception
    {
        DBAccess dba = createDBAccess();

        try
        {
            DBStorage dbs = new DBStorage();
            dbs.setDBAccess(dba);
            dbs.setWritebackTable("t_calculate");
            dbs.open();
    
            StorageDataBook sdb = new StorageDataBook(dbs);
            sdb.open();
            
            //inserting records
            sdb.insert(false);
            sdb.setValues(new String[] {"COSTS", "DESCRIPTION"}, 
                          new Object[] {BigDecimal.valueOf(35), "Record with costs = 35"});
            sdb.insert(false);
            sdb.setValues(new String[] {"COSTS", "DESCRIPTION"}, 
                          new Object[] {BigDecimal.valueOf(40), "Record with costs = 40"});
            sdb.insert(false);
            sdb.setValues(new String[] {"COSTS", "DESCRIPTION"}, 
                          new Object[] {BigDecimal.valueOf(45), "Record with costs = 45"});
            
            sdb.saveAllRows();
            
            sdb.setSelectedRow(0);
            
            Assert.assertEquals(BigDecimal.valueOf(1), sdb.getValue("ID"));
            Assert.assertEquals(BigDecimal.valueOf(10), sdb.getValue("FACTOR"));
            Assert.assertEquals("?", sdb.getValue("STATUS"));
    
            //filtering
            Assert.assertEquals(3, sdb.getRowCount());
            
            sdb.setFilter(new Equals("ID", BigDecimal.valueOf(2)));
            
            Assert.assertEquals(1, sdb.getRowCount());
            
            Assert.assertEquals(BigDecimal.valueOf(40), sdb.getValue("COSTS"));
            
            sdb.setFilter(new GreaterEquals("COSTS", BigDecimal.valueOf(40)));
    
            Assert.assertEquals(2, sdb.getRowCount());
        }
        finally
        {
            CommonUtil.close(dba);
        }
    }
    
    /**
     * Same test as {@link #testPlainStorage()} but with databook model and
     * remote storage.
     * 
     * @throws Throwable if test fails
     */
    @Test
    public void testRemote() throws Throwable
    {
        HttpConnection con = new HttpConnection("http://localhost/myapp/services/Server");

        MasterConnection macon = new MasterConnection(con);
        macon.open();

        try
        {
            RemoteDataSource rds = new RemoteDataSource(macon);
            rds.open();
            
            RemoteDataBook rdb = new RemoteDataBook();
            rdb.setDataSource(rds);
            rdb.setName("calculate");
            
            //inserting records
            rdb.insert(false);
            rdb.setValues(new String[] {"COSTS", "DESCRIPTION"}, 
                          new Object[] {BigDecimal.valueOf(35), "Record with costs = 35"});
            rdb.insert(false);
            rdb.setValues(new String[] {"COSTS", "DESCRIPTION"}, 
                          new Object[] {BigDecimal.valueOf(40), "Record with costs = 40"});
            rdb.insert(false);
            rdb.setValues(new String[] {"COSTS", "DESCRIPTION"}, 
                          new Object[] {BigDecimal.valueOf(45), "Record with costs = 45"});
            
            rdb.saveAllRows();
            
            rdb.setSelectedRow(0);
            
            Assert.assertEquals(BigDecimal.valueOf(1), rdb.getValue("ID"));
            Assert.assertEquals(BigDecimal.valueOf(10), rdb.getValue("FACTOR"));
            Assert.assertEquals("?", rdb.getValue("STATUS"));
    
            //filtering
            Assert.assertEquals(3, rdb.getRowCount());
            
            rdb.setFilter(new Equals("ID", BigDecimal.valueOf(2)));
            
            Assert.assertEquals(1, rdb.getRowCount());
            
            Assert.assertEquals(BigDecimal.valueOf(40), rdb.getValue("COSTS"));
            
            rdb.setFilter(new GreaterEquals("COSTS", BigDecimal.valueOf(40)));
    
            Assert.assertEquals(2, rdb.getRowCount());
        }
        finally
        {
            CommonUtil.close(macon);
        }
    }
    
}   // TestDBAccessUsage
