/*
 * Copyright 2009 SIB Visions GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *
 * History
 *
 * 22.02.2011 - [RH] - creation
 */
package com.sibvisions.rad.model.remote;

import java.sql.SQLException;

import javax.rad.genui.UIFactoryManager;
import javax.rad.model.reference.ReferenceDefinition;
import javax.rad.remote.MasterConnection;
import javax.rad.remote.SubConnection;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sibvisions.rad.persist.jdbc.HSQLDBAccess;
import com.sibvisions.rad.ui.swing.impl.SwingFactory;

import remote.net.VMConnection;

/**
 * Tests all Functions of com.sibvisions.rad.model.StorageDataBook. <br>
 * Run first the TestDBAccess Test class.
 * 
 * @author Roland Hörmann
 * @see com.sibvisions.rad.model.mem.DataBook
 * @see com.sibvisions.rad.model.mem.DataPage
 */
public class TestRemoteDataBook
{
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Class members
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/** The data book test instance. */
	private RemoteDataBook dbDataBook	= new RemoteDataBook();

	/** The remote data source test instance. */
	private RemoteDataSource rds		= new RemoteDataSource();

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Initialization
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/**
	 * Connect to the Test Database.
	 * 
	 * @throws Throwable if the connect to the DB fails
	 */
	@Before
	public void open() throws Throwable
	{		
		MasterConnection connection = new MasterConnection(new VMConnection());
		connection.setApplicationName("demo");
		connection.setUserName("rene");
		connection.setPassword("rene");
		connection.open();

		SubConnection sub = connection.createSubConnection("demo.StorageDataBookTest");
		sub.open();
		
		rds.setConnection(sub);
		rds.open();

		dbDataBook.setDataSource(rds);
	}
	
	/**
	 * Closes all opened connections and statements.
	 */
	@After
	public void close()
	{
		dbDataBook.close();
		
		SubConnection con = (SubConnection)rds.getConnection(); 
		
		try
		{
			con.close();
			con.getMasterConnection().close();
		}
		catch (Throwable th)
		{
			//nothing to be done
		}
		
		rds.close();
	}
	
	/**
	 * Init the Database for the test.
	 * 
	 * @throws Throwable the database couldn't initialized.
	 */
	@BeforeClass
	public static void init() throws Throwable
	{
		HSQLDBAccess dbAccess	= new HSQLDBAccess();
		
		// set connect properties
		dbAccess.setUrl("jdbc:hsqldb:hsql://localhost/testdb");
		dbAccess.setUsername("sa");
		dbAccess.setPassword("");
	
		// open and check
		dbAccess.open();
		Assert.assertTrue(dbAccess.isOpen());
		
		// drop test table
		try
		{
			dbAccess.executeStatement("drop table detail");
		}
		catch (SQLException se)
		{
			se.printStackTrace();
		}
		try
		{
			dbAccess.executeStatement("drop table test");
		}
		catch (SQLException se)
		{
			se.printStackTrace();
		}

		// create test table
		dbAccess.executeStatement("create table test (id integer GENERATED BY DEFAULT AS IDENTITY primary key, name varchar(100))");
		
		// create detail table
		dbAccess.executeStatement("create table detail (id integer GENERATED BY DEFAULT AS IDENTITY primary key, name varchar(100), " +
				"test_id INTEGER, FOREIGN KEY (test_id) REFERENCES test (id))");
	}
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Test methods
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	/**
	 * Test the AutoLinkInvisibleForMasterReferences behavior with a master and a detail DataBook.
	 * 
	 * @throws Exception if the master/detail support work incorrectly
	 */	
	@Test
	public void testFeature199() throws Exception
	{
		UIFactoryManager.getFactoryInstance(SwingFactory.class);
		
		// read all Data and display it
		dbDataBook.setName("TEST");
		dbDataBook.open();
		
		ReferenceDefinition bdDETAILtoTEST = new ReferenceDefinition();
		bdDETAILtoTEST.setReferencedDataBook(dbDataBook);
		bdDETAILtoTEST.setReferencedColumnNames(new String [] { "ID" });
		bdDETAILtoTEST.setColumnNames(new String [] { "TEST_ID" });
		
		RemoteDataBook dbDetail = new RemoteDataBook();
		dbDetail.setName("DETAIL");
		dbDetail.setMasterReference(bdDETAILtoTEST);
		dbDetail.setDataSource(rds);
		dbDetail.open();
		
		Assert.assertEquals(1, dbDetail.getRowDefinition().getColumnView(null).getColumnNames().length);
		Assert.assertEquals("NAME", dbDetail.getRowDefinition().getColumnView(null).getColumnNames()[0]);
	}
	
} 	// TestDataBook
