/*
 * Copyright 2014 SIB Visions GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *
 * History
 *
 * 21.04.2014 - [JR] - creation
 */
package com.sibvisions.rad.persist.jdbc;

import java.math.BigDecimal;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.sibvisions.util.type.CommonUtil;

/**
 * Tests all Functions of {@link TestDB2DBAccessV9} with a DB2 10 database.
 * 
 * @author René Jahn
 * @see com.sibvisions.rad.persist.jdbc.DB2DBAccess
 */
public class TestDB2DBAccessV10 extends TestDBAccess
{
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Overwritten methods
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /** 
     * {@inheritDoc}
     */
    @Before
    @Override
    public void open() throws Exception
    {
        checkConnectionError();
        
        DriverManager.setLoginTimeout(8);
        
        dba = new DB2DBAccess();
        
        // set connect properties       
        dba.setUrl("jdbc:db2://" + getHostName() + "/TEST");
        dba.setUsername("test");
        dba.setPassword("test");

        try
        {
            // open and check
            dba.open();

            setConnectionError(false);
        }
        catch (Exception e)
        {
            setConnectionError(true);
            
            throw e;
        }
        Assert.assertTrue(dba.isOpen());
        
        dba.executeStatement("delete from detail");
        dba.executeStatement("delete from test");
        dba.executeStatement("delete from test_sort");

        // Test db 2
        dba2 = new DB2DBAccess();
        dba2.setUrl("jdbc:db2://" + getHostName() + "/TEST");
        dba2.setUsername("test");
        dba2.setPassword("test");
        
        dba2.open();
        
        /* -Xmx512m 
        dba2.getConnection().setAutoCommit(false);
        
        psPreparedStatement = dba2.getPreparedStatement("delete from ADRESSEN", false);
        dba2.executeUpdate(psPreparedStatement);

        //Adressen befüllen
        for (int i = 1; i <= 100000; i++)
        {
            psPreparedStatement = dba2.getPreparedStatement(
                    "insert into ADRESSEN (POST_ID, STRA_ID, HAUSNUMMER, STIEGE, TUERNUMMER) " +
                      " VALUES (" + getRandom(0, 8000 - 1) + ", " + 
                                    getRandom(0, 5000 - 1) + ", " + 
                                    getRandom(0, 49) + ", " +
                                    getRandom(1, 9) + "," + 
                                    getRandom(1, 100) + ")", 
                    false);
            dba2.executeUpdate(psPreparedStatement);
        }
        
        dba2.commit();*/
    }

	/** 
	 * Creates test tables for new tests.
	 * 
	 * @throws Exception
	 *             if the connect or the create table fails
	 */
    @Override
	protected void createTestTables() throws Exception
	{
		dba.executeStatement("create table test_unquoted_lowercase (id decimal(18) NOT NULL GENERATED BY DEFAULT  AS IDENTITY, name varchar(100), "
				+ "CONSTRAINT tuql_pk PRIMARY KEY (id))");

		dba.executeStatement("create table TEST_UNQUOTED_UPPERCASE (ID decimal(18) NOT NULL GENERATED BY DEFAULT  AS IDENTITY, NAME varchar(100), "
				+ "CONSTRAINT tuqu_pk PRIMARY KEY (ID))");

		dba.executeStatement("create table `Test_Quoted` (`Id` decimal(18) NOT NULL GENERATED BY DEFAULT  AS IDENTITY, `Name` varchar(100), " 
				+ "CONSTRAINT tq_pk PRIMARY KEY (`Id`))");
		
		dba.executeStatement("create table TEST_PK_FETCH (SOME_VALUE varchar(32) not null, CREATED_AT timestamp not null default CURRENT_TIMESTAMP, "
				+ " primary key (SOME_VALUE))"); 
	    
        dba.executeStatement("create table TEST_COLUMN_SPECIALCHAR (ID integer not null, \"FIRST NAME\" varchar(100), \"LAST#NAME\" varchar(100), "
                + "constraint TESC_PK primary key (ID))");
	}

    /**
     * Don't test!
     */
    @Test
    @Override
    public void testBaseStatements()
    {
    }
    
    /**
     * {@inheritDoc}
     */
    @Test
    @Override
    public void testMetaData() throws Exception
    {
        DBStorage dbs = new DBStorage();
        dbs.setDBAccess(dba);
        dbs.setWritebackTable("TEST");
        dbs.setFromClause("TEST");
        dbs.open();
    }
    
    /**
     * {@inheritDoc}
     */
    @Test
    @Override
    public void testDefaultAllowedValues() throws Exception
    {
		try
		{
			dba.executeStatement("drop table test_defaultallowed");
		}
		catch (SQLException se)
		{
			//nothing to be done
		}
		
		dba.executeStatement("CREATE TABLE test_defaultallowed (dummyname varchar(100), zahl integer DEFAULT 15, text varchar(100) DEFAULT 'Hallo')");
		
		DBStorage dbs = new DBStorage();
		dbs.setDBAccess(dba);
		dbs.setWritebackTable("test_defaultallowed");
		dbs.open();
		
		//#1751 #1750
		Assert.assertEquals(BigDecimal.valueOf(15), dbs.getMetaData().getColumnMetaData("ZAHL").getDefaultValue());
		Assert.assertEquals("Hallo", dbs.getMetaData().getColumnMetaData("TEXT").getDefaultValue());
		
    }   
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // User-defined methods
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    /**
     * Gets the hostname.
     * 
     * @return the hostname or IP
     */
    protected String getHostName()
    {
        return "192.168.1.220:50000";
    }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Test methods
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /**
     * Tests if the synonym support works.
     * 
     * @throws Exception if test fails
     */
    @Test
    public void testSynonyms() throws Exception
    {
        DBStorage dbsTest = new DBStorage();
        dbsTest.setDBAccess(dba);
        dbsTest.setWritebackTable("SYN_TEST");
        dbsTest.open();
        
        // SYN_TEST points to the DETAIL Table, it should find a Primary Key to make sure the synonym is replace with the DETAIL table.
        Assert.assertTrue(dbsTest.getMetaData().getPrimaryKeyColumnNames().length > 0);
    }
    
    /**
     * Tests refetch of PK when inserting a new row. The write back table contains
     * the schema name.
     * 
     * @throws Exception if the test fails
     */
    @Test
    public void testResultSetColumnAccess() throws Exception
    {
        dba.executeStatement("delete from test_unquoted_lowercase");
        dba.executeStatement("insert into test_unquoted_lowercase (id, name) values (1, 'Name 1')");
        
        Statement stat = dba.getConnection().createStatement();
        
        ResultSet res = stat.executeQuery("select * from test_unquoted_lowercase");
        
        while (res.next())
        {
            for (int i = 1, count = res.getMetaData().getColumnCount(); i <= count; i++)
            {
                String columnName = res.getMetaData().getColumnName(i);
                System.out.println(columnName + "  " + res.getObject(columnName.toLowerCase()) + "  " + res.getObject(columnName.toUpperCase()));
            }
        }
        
        CommonUtil.close(res, stat);

        dba.executeStatement("delete from `Test_Quoted`");
        dba.executeStatement("insert into `Test_Quoted` (`Id`, `Name`) values (1, 'Name 1')");
        
        stat = dba.getConnection().createStatement();
        
        res = stat.executeQuery("select * from \"Test_Quoted\"");
        
        while (res.next())
        {
            for (int i = 1, count = res.getMetaData().getColumnCount(); i <= count; i++)
            {
                String columnName = res.getMetaData().getColumnName(i);
                System.out.println(columnName + "  " + res.getObject(columnName.toLowerCase()) + "  " + res.getObject(columnName.toUpperCase()));
            }
        }
        
        CommonUtil.close(res, stat);
    }
    

} 	// TestDB2DBAccessV10
